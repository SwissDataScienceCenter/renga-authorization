---
  swagger: "2.0"
  info: 
    title: "User Management API"
    description: "API endpoints for managing users"
    version: "1.0.0"
  schemes: 
    - "https"
  basePath: "/"
  produces: 
    - "application/json"
  consumes: 
    - "application/json"
  paths: 
    /user: 
      get: 
        summary: "Get a (possibly filtered) list of users"
        description: "This can be used to get the list of all users or applying some filtering.\nThe parameters can be using wildcard (*) or doing exact matching.\n"
        parameters: 
          - 
            name: "email"
            in: "query"
            description: "The e-mail address of the user"
            required: false
            type: "string"
          - 
            name: "first_name"
            in: "query"
            description: "The first_name of the user"
            required: false
            type: "string"
          - 
            name: "last_name"
            in: "query"
            description: "The last_name of the user"
            required: false
            type: "string"
        responses: 
          200: 
            description: "A list of users"
            schema: 
              type: "array"
              items: 
                $ref: "#/definitions/User"
          default: 
            description: "Unexpected error"
            schema: 
              $ref: "#/definitions/Error"
      post: 
        summary: "Create a new user"
        description: "This creates a new user.\n"
        parameters: 
          - 
            name: "data"
            in: "body"
            description: "The json representation of the user"
            required: true
            schema: 
              $ref: "#/definitions/User"
        responses: 
          200: 
            description: "Returns the created user."
            schema: 
              $ref: "#/definitions/User"
          default: 
            description: "Unexpected error"
            schema: 
              $ref: "#/definitions/Error"
    /user/{user-uuid}: 
      parameters: 
        - 
          name: "user-uuid"
          in: "path"
          description: "the uuid representing the user"
          type: "string"
          required: true
      get: 
        summary: "Return the given user"
        description: "Return the given user"
        responses: 
          200: 
            description: "Returns the given user."
            schema: 
              $ref: "#/definitions/User"
          default: 
            description: "Unexpected error"
            schema: 
              $ref: "#/definitions/Error"
      put: 
        summary: "update the given user."
        description: "Update all the users values given in the query."
        parameters: 
          - 
            name: "data"
            in: "body"
            description: "the new values for the user"
            required: true
            schema: 
              $ref: "#/definitions/User"
        responses: 
          200: 
            description: "Returns the modified user."
            schema: 
              $ref: "#/definitions/User"
          default: 
            description: "Unexpected error"
            schema: 
              $ref: "#/definitions/Error"
      delete: 
        summary: "delete the given user"
        description: "Delete the user"
        responses: 
          200: 
            description: "Returns the given user."
            schema: 
              $ref: "#/definitions/User"
          default: 
            description: "Unexpected error"
            schema: 
              $ref: "#/definitions/Error"
  definitions: 
    User: 
      type: "object"
      properties: 
        username: 
          type: "string"
          description: "The username of the user."
        email: 
          type: "string"
          description: "The e-mail adresse of the user."
        first_name: 
          type: "string"
          description: "The firstname of the user."
        last_name: 
          type: "string"
          description: "The last_name of the user."
    Error: 
      type: "object"
      properties: 
        code: 
          type: "integer"
          format: "int32"
        message: 
          type: "string"
        fields: 
          type: "string"
